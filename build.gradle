import org.gradle.api.publish.maven.MavenPublication
import org.gradle.api.tasks.compile.GroovyCompile
import org.gradle.api.tasks.compile.JavaCompile
import org.gradle.jvm.toolchain.JavaLanguageVersion

plugins {
    id "com.diffplug.spotless" version "6.8.0"
    id "com.gorylenko.gradle-git-properties" version "2.2.4"
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.springframework.boot' version '2.7.0' apply false
    id "org.openapi.generator" version "6.0.0"
    id "org.hidetake.swagger.generator" version "2.19.2"
    id "com.palantir.docker" version "0.33.0" apply false
}

ext.versions = [
        springBoot        : '2.7.7',
        springSecurity    : '5.4.6',
        springCloudVersion: '2020.0.1',
        springCloud       : '2022.0.0',
        micrometer        : '1.10.3',
        commonLogging     : '1.2',
        springAWSCloud    : '2.3.3',
        springSession     : '2021.2.0',
]

apply from: 'version.gradle'
def getProjectVersion = loadVersion().getVersionForProject()

allprojects {
    apply plugin: 'io.spring.dependency-management'
    group 'com.spring.example'
    version = getProjectVersion

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${versions.springBoot}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${versions.springCloud}")
        }
        dependencies {
            dependency group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: versions.micrometer
            dependency group: 'commons-logging', name: 'commons-logging', version: versions.commonLogging
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'maven-publish'
    apply plugin: "com.diffplug.spotless"

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
        withSourcesJar()
    }

    spotless {
        java {
            googleJavaFormat("1.15.0")
            indentWithTabs(2)
            indentWithSpaces(4)
        }
    }

    afterEvaluate {
        def spotless = tasks.findByName('spotlessApply')
        if (spotless) {
            tasks.withType(JavaCompile) {
                finalizedBy(spotless)
            }

            tasks.withType(GroovyCompile) {
                finalizedBy(spotless)
            }
        }
    }

    dependencies {
        implementation group: 'org.codehaus.groovy', name: 'groovy'
        implementation group: 'org.codehaus.groovy', name: 'groovy-json'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }

    test {
        useJUnitPlatform()
    }

    //Upload/publish artifiacts
    publishing {
        publications {
            mavenJava(MavenPublication) {
                // jar is the default build task configured by Spring Boot if bootJar=false
                from components.java
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
            }
        }
    }
}


